/**
 * Talon.One API
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body', 'model/Body1', 'model/Body10', 'model/Body11', 'model/Body12', 'model/Body13', 'model/Body14', 'model/Body15', 'model/Body16', 'model/Body17', 'model/Body18', 'model/Body19', 'model/Body2', 'model/Body20', 'model/Body21', 'model/Body22', 'model/Body23', 'model/Body24', 'model/Body25', 'model/Body26', 'model/Body27', 'model/Body28', 'model/Body29', 'model/Body3', 'model/Body4', 'model/Body5', 'model/Body6', 'model/Body7', 'model/Body8', 'model/Body9', 'model/InlineResponse200', 'model/InlineResponse2001', 'model/InlineResponse20010', 'model/InlineResponse20011', 'model/InlineResponse20012', 'model/InlineResponse20013', 'model/InlineResponse20014', 'model/InlineResponse20014Data', 'model/InlineResponse20015', 'model/InlineResponse20016', 'model/InlineResponse20016Data', 'model/InlineResponse20017', 'model/InlineResponse20018', 'model/InlineResponse20018Data', 'model/InlineResponse20019', 'model/InlineResponse2001Data', 'model/InlineResponse2002', 'model/InlineResponse20020', 'model/InlineResponse20021', 'model/InlineResponse20022', 'model/InlineResponse20023', 'model/InlineResponse20023Data', 'model/InlineResponse20024', 'model/InlineResponse20025', 'model/InlineResponse20026', 'model/InlineResponse20026Data', 'model/InlineResponse20027', 'model/InlineResponse20027Data', 'model/InlineResponse20028', 'model/InlineResponse20029', 'model/InlineResponse2003', 'model/InlineResponse20030', 'model/InlineResponse20031', 'model/InlineResponse20032', 'model/InlineResponse20033', 'model/InlineResponse2003Data', 'model/InlineResponse2004', 'model/InlineResponse2004Data', 'model/InlineResponse2005', 'model/InlineResponse2006', 'model/InlineResponse2007', 'model/InlineResponse2008', 'model/InlineResponse2008Data', 'model/InlineResponse2009', 'model/InlineResponse2009Data', 'model/InlineResponse200Data', 'model/InlineResponse201', 'model/InlineResponse2011', 'model/InlineResponse204', 'model/InlineResponse2041', 'model/LatestFeature'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body'), require('../model/Body1'), require('../model/Body10'), require('../model/Body11'), require('../model/Body12'), require('../model/Body13'), require('../model/Body14'), require('../model/Body15'), require('../model/Body16'), require('../model/Body17'), require('../model/Body18'), require('../model/Body19'), require('../model/Body2'), require('../model/Body20'), require('../model/Body21'), require('../model/Body22'), require('../model/Body23'), require('../model/Body24'), require('../model/Body25'), require('../model/Body26'), require('../model/Body27'), require('../model/Body28'), require('../model/Body29'), require('../model/Body3'), require('../model/Body4'), require('../model/Body5'), require('../model/Body6'), require('../model/Body7'), require('../model/Body8'), require('../model/Body9'), require('../model/InlineResponse200'), require('../model/InlineResponse2001'), require('../model/InlineResponse20010'), require('../model/InlineResponse20011'), require('../model/InlineResponse20012'), require('../model/InlineResponse20013'), require('../model/InlineResponse20014'), require('../model/InlineResponse20014Data'), require('../model/InlineResponse20015'), require('../model/InlineResponse20016'), require('../model/InlineResponse20016Data'), require('../model/InlineResponse20017'), require('../model/InlineResponse20018'), require('../model/InlineResponse20018Data'), require('../model/InlineResponse20019'), require('../model/InlineResponse2001Data'), require('../model/InlineResponse2002'), require('../model/InlineResponse20020'), require('../model/InlineResponse20021'), require('../model/InlineResponse20022'), require('../model/InlineResponse20023'), require('../model/InlineResponse20023Data'), require('../model/InlineResponse20024'), require('../model/InlineResponse20025'), require('../model/InlineResponse20026'), require('../model/InlineResponse20026Data'), require('../model/InlineResponse20027'), require('../model/InlineResponse20027Data'), require('../model/InlineResponse20028'), require('../model/InlineResponse20029'), require('../model/InlineResponse2003'), require('../model/InlineResponse20030'), require('../model/InlineResponse20031'), require('../model/InlineResponse20032'), require('../model/InlineResponse20033'), require('../model/InlineResponse2003Data'), require('../model/InlineResponse2004'), require('../model/InlineResponse2004Data'), require('../model/InlineResponse2005'), require('../model/InlineResponse2006'), require('../model/InlineResponse2007'), require('../model/InlineResponse2008'), require('../model/InlineResponse2008Data'), require('../model/InlineResponse2009'), require('../model/InlineResponse2009Data'), require('../model/InlineResponse200Data'), require('../model/InlineResponse201'), require('../model/InlineResponse2011'), require('../model/InlineResponse204'), require('../model/InlineResponse2041'), require('../model/LatestFeature'));
  } else {
    // Browser globals (root is window)
    if (!root.TalononeApi) {
      root.TalononeApi = {};
    }
    root.TalononeApi.ManagementApiApi = factory(root.TalononeApi.ApiClient, root.TalononeApi.Body, root.TalononeApi.Body1, root.TalononeApi.Body10, root.TalononeApi.Body11, root.TalononeApi.Body12, root.TalononeApi.Body13, root.TalononeApi.Body14, root.TalononeApi.Body15, root.TalononeApi.Body16, root.TalononeApi.Body17, root.TalononeApi.Body18, root.TalononeApi.Body19, root.TalononeApi.Body2, root.TalononeApi.Body20, root.TalononeApi.Body21, root.TalononeApi.Body22, root.TalononeApi.Body23, root.TalononeApi.Body24, root.TalononeApi.Body25, root.TalononeApi.Body26, root.TalononeApi.Body27, root.TalononeApi.Body28, root.TalononeApi.Body29, root.TalononeApi.Body3, root.TalononeApi.Body4, root.TalononeApi.Body5, root.TalononeApi.Body6, root.TalononeApi.Body7, root.TalononeApi.Body8, root.TalononeApi.Body9, root.TalononeApi.InlineResponse200, root.TalononeApi.InlineResponse2001, root.TalononeApi.InlineResponse20010, root.TalononeApi.InlineResponse20011, root.TalononeApi.InlineResponse20012, root.TalononeApi.InlineResponse20013, root.TalononeApi.InlineResponse20014, root.TalononeApi.InlineResponse20014Data, root.TalononeApi.InlineResponse20015, root.TalononeApi.InlineResponse20016, root.TalononeApi.InlineResponse20016Data, root.TalononeApi.InlineResponse20017, root.TalononeApi.InlineResponse20018, root.TalononeApi.InlineResponse20018Data, root.TalononeApi.InlineResponse20019, root.TalononeApi.InlineResponse2001Data, root.TalononeApi.InlineResponse2002, root.TalononeApi.InlineResponse20020, root.TalononeApi.InlineResponse20021, root.TalononeApi.InlineResponse20022, root.TalononeApi.InlineResponse20023, root.TalononeApi.InlineResponse20023Data, root.TalononeApi.InlineResponse20024, root.TalononeApi.InlineResponse20025, root.TalononeApi.InlineResponse20026, root.TalononeApi.InlineResponse20026Data, root.TalononeApi.InlineResponse20027, root.TalononeApi.InlineResponse20027Data, root.TalononeApi.InlineResponse20028, root.TalononeApi.InlineResponse20029, root.TalononeApi.InlineResponse2003, root.TalononeApi.InlineResponse20030, root.TalononeApi.InlineResponse20031, root.TalononeApi.InlineResponse20032, root.TalononeApi.InlineResponse20033, root.TalononeApi.InlineResponse2003Data, root.TalononeApi.InlineResponse2004, root.TalononeApi.InlineResponse2004Data, root.TalononeApi.InlineResponse2005, root.TalononeApi.InlineResponse2006, root.TalononeApi.InlineResponse2007, root.TalononeApi.InlineResponse2008, root.TalononeApi.InlineResponse2008Data, root.TalononeApi.InlineResponse2009, root.TalononeApi.InlineResponse2009Data, root.TalononeApi.InlineResponse200Data, root.TalononeApi.InlineResponse201, root.TalononeApi.InlineResponse2011, root.TalononeApi.InlineResponse204, root.TalononeApi.InlineResponse2041, root.TalononeApi.LatestFeature);
  }
}(this, function(ApiClient, Body, Body1, Body10, Body11, Body12, Body13, Body14, Body15, Body16, Body17, Body18, Body19, Body2, Body20, Body21, Body22, Body23, Body24, Body25, Body26, Body27, Body28, Body29, Body3, Body4, Body5, Body6, Body7, Body8, Body9, InlineResponse200, InlineResponse2001, InlineResponse20010, InlineResponse20011, InlineResponse20012, InlineResponse20013, InlineResponse20014, InlineResponse20014Data, InlineResponse20015, InlineResponse20016, InlineResponse20016Data, InlineResponse20017, InlineResponse20018, InlineResponse20018Data, InlineResponse20019, InlineResponse2001Data, InlineResponse2002, InlineResponse20020, InlineResponse20021, InlineResponse20022, InlineResponse20023, InlineResponse20023Data, InlineResponse20024, InlineResponse20025, InlineResponse20026, InlineResponse20026Data, InlineResponse20027, InlineResponse20027Data, InlineResponse20028, InlineResponse20029, InlineResponse2003, InlineResponse20030, InlineResponse20031, InlineResponse20032, InlineResponse20033, InlineResponse2003Data, InlineResponse2004, InlineResponse2004Data, InlineResponse2005, InlineResponse2006, InlineResponse2007, InlineResponse2008, InlineResponse2008Data, InlineResponse2009, InlineResponse2009Data, InlineResponse200Data, InlineResponse201, InlineResponse2011, InlineResponse204, InlineResponse2041, LatestFeature) {
  'use strict';

  /**
   * ManagementApi service.
   * @module api/ManagementApiApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ManagementApiApi. 
   * @alias module:api/ManagementApiApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create an API Key
     * Create a new API key in the account.
     * @param {Object} opts Optional parameters
     * @param {module:model/Body13} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse201} and HTTP response
     */
    this.createAPIKeyWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/v1/api_keys', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an API Key
     * Create a new API key in the account.
     * @param {Object} opts Optional parameters
     * @param {module:model/Body13} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse201}
     */
    this.createAPIKey = function(opts) {
      return this.createAPIKeyWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an Application
     * Create a new application in the current account.
     * @param {Object} opts Optional parameters
     * @param {module:model/Body} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200Data} and HTTP response
     */
    this.createApplicationWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200Data;

      return this.apiClient.callApi(
        '/v1/applications', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an Application
     * Create a new application in the current account.
     * @param {Object} opts Optional parameters
     * @param {module:model/Body} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200Data}
     */
    this.createApplication = function(opts) {
      return this.createApplicationWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Campaign
     * 
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body2} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001Data} and HTTP response
     */
    this.createCampaignWithHttpInfo = function(applicationId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling createCampaign");
      }


      var pathParams = {
        'applicationId': applicationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2001Data;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a Campaign
     * 
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body2} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001Data}
     */
    this.createCampaign = function(applicationId, opts) {
      return this.createCampaignWithHttpInfo(applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Coupons
     * Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupns can be created.
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.silent If set to &#39;yes&#39;, response will be an empty 204, otherwise a list of the coupons generated (to to 1000).
     * @param {module:model/Body9} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2004} and HTTP response
     */
    this.createCouponsWithHttpInfo = function(applicationId, campaignId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling createCoupons");
      }

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling createCoupons");
      }


      var pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      var queryParams = {
        'silent': opts['silent'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/coupons', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create Coupons
     * Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupns can be created.
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.silent If set to &#39;yes&#39;, response will be an empty 204, otherwise a list of the coupons generated (to to 1000).
     * @param {module:model/Body9} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2004}
     */
    this.createCoupons = function(applicationId, campaignId, opts) {
      return this.createCouponsWithHttpInfo(applicationId, campaignId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Event Type
     * Define a new event type. Due to event types being immutable, this operation also serves the purpose of updating an event type. To create a new version of an existing event type use the same name with a new &#x60;version&#x60; (by convention the new version is &#x60;oldVersion + 1&#x60;, but any unique &#x60;(name, version)&#x60; combination is allowed. 
     * @param {module:model/Body22} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20026Data} and HTTP response
     */
    this.createEventTypeWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createEventType");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20026Data;

      return this.apiClient.callApi(
        '/v1/event_types', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create Event Type
     * Define a new event type. Due to event types being immutable, this operation also serves the purpose of updating an event type. To create a new version of an existing event type use the same name with a new &#x60;version&#x60; (by convention the new version is &#x60;oldVersion + 1&#x60;, but any unique &#x60;(name, version)&#x60; combination is allowed. 
     * @param {module:model/Body22} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20026Data}
     */
    this.createEventType = function(body) {
      return this.createEventTypeWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Invite a new user to your account
     * Creates a new invitation within your account. To trigger sending of an invitation email, use the &#x60;createInviteEmail&#x60; operation below. 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body24} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20027Data} and HTTP response
     */
    this.createInviteWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20027Data;

      return this.apiClient.callApi(
        '/v1/invites', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Invite a new user to your account
     * Creates a new invitation within your account. To trigger sending of an invitation email, use the &#x60;createInviteEmail&#x60; operation below. 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body24} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20027Data}
     */
    this.createInvite = function(opts) {
      return this.createInviteWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Request a password reset
     * Sends an email with a password recovery link to the email of an existing account. 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body25} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse204} and HTTP response
     */
    this.createPasswordRecoveryEmailWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse204;

      return this.apiClient.callApi(
        '/v1/password_recovery_emails', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Request a password reset
     * Sends an email with a password recovery link to the email of an existing account. 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body25} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse204}
     */
    this.createPasswordRecoveryEmail = function(opts) {
      return this.createPasswordRecoveryEmailWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a role
     * Create a new role in the account.
     * @param {Object} opts Optional parameters
     * @param {module:model/Body16} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2009Data} and HTTP response
     */
    this.createRoleWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2009Data;

      return this.apiClient.callApi(
        '/v1/roles', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a role
     * Create a new role in the account.
     * @param {Object} opts Optional parameters
     * @param {module:model/Body16} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2009Data}
     */
    this.createRole = function(opts) {
      return this.createRoleWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Ruleset
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body7} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2003Data} and HTTP response
     */
    this.createRulesetWithHttpInfo = function(applicationId, campaignId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling createRuleset");
      }

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling createRuleset");
      }


      var pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2003Data;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a Ruleset
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body7} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2003Data}
     */
    this.createRuleset = function(applicationId, campaignId, opts) {
      return this.createRulesetWithHttpInfo(applicationId, campaignId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Session
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body28} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2011} and HTTP response
     */
    this.createSessionWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2011;

      return this.apiClient.callApi(
        '/v1/sessions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a Session
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body28} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2011}
     */
    this.createSession = function(opts) {
      return this.createSessionWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Webhook
     * Creates a new webhook.
     * @param {module:model/Body20} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20023Data} and HTTP response
     */
    this.createWebhookWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createWebhook");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20023Data;

      return this.apiClient.callApi(
        '/v1/webhooks', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create Webhook
     * Creates a new webhook.
     * @param {module:model/Body20} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20023Data}
     */
    this.createWebhook = function(body) {
      return this.createWebhookWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an API key
     * Delete an API Key.
     * @param {Number} apiKeyId The identifier for the API key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteAPIKeyWithHttpInfo = function(apiKeyId) {
      var postBody = null;

      // verify the required parameter 'apiKeyId' is set
      if (apiKeyId === undefined || apiKeyId === null) {
        throw new Error("Missing the required parameter 'apiKeyId' when calling deleteAPIKey");
      }


      var pathParams = {
        'apiKeyId': apiKeyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api_keys/{apiKeyId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an API key
     * Delete an API Key.
     * @param {Number} apiKeyId The identifier for the API key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteAPIKey = function(apiKeyId) {
      return this.deleteAPIKeyWithHttpInfo(apiKeyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an Application
     * Delete the application specified by the ID. Also deletes associated data.
     * @param {Number} applicationId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteApplicationWithHttpInfo = function(applicationId) {
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteApplication");
      }


      var pathParams = {
        'applicationId': applicationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an Application
     * Delete the application specified by the ID. Also deletes associated data.
     * @param {Number} applicationId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteApplication = function(applicationId) {
      return this.deleteApplicationWithHttpInfo(applicationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a custom attribute
     * Removes a defined custom attribute.  **Warning:** this will also destroy all data associated with the attribute! 
     * @param {Number} attributeId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteAttributeWithHttpInfo = function(attributeId) {
      var postBody = null;

      // verify the required parameter 'attributeId' is set
      if (attributeId === undefined || attributeId === null) {
        throw new Error("Missing the required parameter 'attributeId' when calling deleteAttribute");
      }


      var pathParams = {
        'attributeId': attributeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/attributes/{attributeId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a custom attribute
     * Removes a defined custom attribute.  **Warning:** this will also destroy all data associated with the attribute! 
     * @param {Number} attributeId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteAttribute = function(attributeId) {
      return this.deleteAttributeWithHttpInfo(attributeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Campaign
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCampaignWithHttpInfo = function(applicationId, campaignId) {
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteCampaign");
      }

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteCampaign");
      }


      var pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a Campaign
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCampaign = function(applicationId, campaignId) {
      return this.deleteCampaignWithHttpInfo(applicationId, campaignId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete one Coupon
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {String} couponId The ID of the coupon code to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCouponWithHttpInfo = function(applicationId, campaignId, couponId) {
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteCoupon");
      }

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteCoupon");
      }

      // verify the required parameter 'couponId' is set
      if (couponId === undefined || couponId === null) {
        throw new Error("Missing the required parameter 'couponId' when calling deleteCoupon");
      }


      var pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId,
        'couponId': couponId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/{couponId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete one Coupon
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {String} couponId The ID of the coupon code to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCoupon = function(applicationId, campaignId, couponId) {
      return this.deleteCouponWithHttpInfo(applicationId, campaignId, couponId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Coupons
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date} opts.createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.startsAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.startsBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.expiresAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.expiresBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {module:model/String} opts.valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future. 
     * @param {String} opts.batchId Filter results by batches of coupons
     * @param {module:model/String} opts.usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
     * @param {Number} opts.referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code.
     * @param {String} opts.recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field
     * @param {Boolean} opts.exactMatch Filter results to an exact case-insensitive matching against the coupon code (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCouponsWithHttpInfo = function(applicationId, campaignId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteCoupons");
      }

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteCoupons");
      }


      var pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      var queryParams = {
        'value': opts['value'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'startsAfter': opts['startsAfter'],
        'startsBefore': opts['startsBefore'],
        'expiresAfter': opts['expiresAfter'],
        'expiresBefore': opts['expiresBefore'],
        'valid': opts['valid'],
        'batchId': opts['batchId'],
        'usable': opts['usable'],
        'referralId': opts['referralId'],
        'recipientIntegrationId': opts['recipientIntegrationId'],
        'exactMatch': opts['exactMatch'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/coupons', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete Coupons
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date} opts.createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.startsAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.startsBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.expiresAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.expiresBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {module:model/String} opts.valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future. 
     * @param {String} opts.batchId Filter results by batches of coupons
     * @param {module:model/String} opts.usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
     * @param {Number} opts.referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code.
     * @param {String} opts.recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field
     * @param {Boolean} opts.exactMatch Filter results to an exact case-insensitive matching against the coupon code (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCoupons = function(applicationId, campaignId, opts) {
      return this.deleteCouponsWithHttpInfo(applicationId, campaignId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Event Type
     * Removes an existing event type.
     * @param {Number} eventTypeId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteEventTypeWithHttpInfo = function(eventTypeId) {
      var postBody = null;

      // verify the required parameter 'eventTypeId' is set
      if (eventTypeId === undefined || eventTypeId === null) {
        throw new Error("Missing the required parameter 'eventTypeId' when calling deleteEventType");
      }


      var pathParams = {
        'eventTypeId': eventTypeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/event_types/{eventTypeId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete Event Type
     * Removes an existing event type.
     * @param {Number} eventTypeId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteEventType = function(eventTypeId) {
      return this.deleteEventTypeWithHttpInfo(eventTypeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete one Referral
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {String} referralId The ID of the referral code to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteReferralWithHttpInfo = function(applicationId, campaignId, referralId) {
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteReferral");
      }

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteReferral");
      }

      // verify the required parameter 'referralId' is set
      if (referralId === undefined || referralId === null) {
        throw new Error("Missing the required parameter 'referralId' when calling deleteReferral");
      }


      var pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId,
        'referralId': referralId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/{referralId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete one Referral
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {String} referralId The ID of the referral code to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteReferral = function(applicationId, campaignId, referralId) {
      return this.deleteReferralWithHttpInfo(applicationId, campaignId, referralId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a role
     * Delete a role.
     * @param {Number} roleId The identifier for the role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteRoleWithHttpInfo = function(roleId) {
      var postBody = null;

      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling deleteRole");
      }


      var pathParams = {
        'roleId': roleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/roles/{roleId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a role
     * Delete a role.
     * @param {Number} roleId The identifier for the role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteRole = function(roleId) {
      return this.deleteRoleWithHttpInfo(roleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Ruleset
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Number} rulesetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteRulesetWithHttpInfo = function(applicationId, campaignId, rulesetId) {
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteRuleset");
      }

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteRuleset");
      }

      // verify the required parameter 'rulesetId' is set
      if (rulesetId === undefined || rulesetId === null) {
        throw new Error("Missing the required parameter 'rulesetId' when calling deleteRuleset");
      }


      var pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId,
        'rulesetId': rulesetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets/{rulesetId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a Ruleset
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Number} rulesetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteRuleset = function(applicationId, campaignId, rulesetId) {
      return this.deleteRulesetWithHttpInfo(applicationId, campaignId, rulesetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a User
     * 
     * @param {Number} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteUserWithHttpInfo = function(userId) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUser");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/users/{userId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a User
     * 
     * @param {Number} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteUser = function(userId) {
      return this.deleteUserWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Webhook
     * Removes an existing webhook.
     * @param {Number} webhookId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteWebhookWithHttpInfo = function(webhookId) {
      var postBody = null;

      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling deleteWebhook");
      }


      var pathParams = {
        'webhookId': webhookId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/webhooks/{webhookId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete Webhook
     * Removes an existing webhook.
     * @param {Number} webhookId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteWebhook = function(webhookId) {
      return this.deleteWebhookWithHttpInfo(webhookId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Destroy a Session
     * 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.destroySessionWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/sessions', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Destroy a Session
     * 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.destroySession = function() {
      return this.destroySessionWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Duplicate the campaign into every specified application
     * Duplicate the campaign into every specified application. 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body5} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response
     */
    this.duplicateCampaignToApplicationsWithHttpInfo = function(applicationId, campaignId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling duplicateCampaignToApplications");
      }

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling duplicateCampaignToApplications");
      }


      var pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/campaign_duplicate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Duplicate the campaign into every specified application
     * Duplicate the campaign into every specified application. 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body5} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001}
     */
    this.duplicateCampaignToApplications = function(applicationId, campaignId, opts) {
      return this.duplicateCampaignToApplicationsWithHttpInfo(applicationId, campaignId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get API Key
     * Get a specific API key.
     * @param {Number} apiKeyId The identifier for the API key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2008Data} and HTTP response
     */
    this.getAPIKeyWithHttpInfo = function(apiKeyId) {
      var postBody = null;

      // verify the required parameter 'apiKeyId' is set
      if (apiKeyId === undefined || apiKeyId === null) {
        throw new Error("Missing the required parameter 'apiKeyId' when calling getAPIKey");
      }


      var pathParams = {
        'apiKeyId': apiKeyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2008Data;

      return this.apiClient.callApi(
        '/api_keys/{apiKeyId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get API Key
     * Get a specific API key.
     * @param {Number} apiKeyId The identifier for the API key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2008Data}
     */
    this.getAPIKey = function(apiKeyId) {
      return this.getAPIKeyWithHttpInfo(apiKeyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List API Keys for the account
     * Show API keys for this account. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2008} and HTTP response
     */
    this.getAPIKeysWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2008;

      return this.apiClient.callApi(
        '/v1/api_keys', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List API Keys for the account
     * Show API keys for this account. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2008}
     */
    this.getAPIKeys = function(opts) {
      return this.getAPIKeysWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get access logs for application
     * 
     * @param {Number} applicationId 
     * @param {Date} rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string
     * @param {Date} rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Only return results where the request path matches the given regular expresssion.
     * @param {module:model/String} opts.method Only return results where the request method matches the given regular expresssion.
     * @param {module:model/String} opts.status Filter results by HTTP status codes.
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20011} and HTTP response
     */
    this.getAccessLogsWithHttpInfo = function(applicationId, rangeStart, rangeEnd, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getAccessLogs");
      }

      // verify the required parameter 'rangeStart' is set
      if (rangeStart === undefined || rangeStart === null) {
        throw new Error("Missing the required parameter 'rangeStart' when calling getAccessLogs");
      }

      // verify the required parameter 'rangeEnd' is set
      if (rangeEnd === undefined || rangeEnd === null) {
        throw new Error("Missing the required parameter 'rangeEnd' when calling getAccessLogs");
      }


      var pathParams = {
        'applicationId': applicationId
      };
      var queryParams = {
        'path': opts['path'],
        'method': opts['method'],
        'status': opts['status'],
        'rangeStart': rangeStart,
        'rangeEnd': rangeEnd,
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20011;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/access_logs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get access logs for application
     * 
     * @param {Number} applicationId 
     * @param {Date} rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string
     * @param {Date} rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Only return results where the request path matches the given regular expresssion.
     * @param {module:model/String} opts.method Only return results where the request method matches the given regular expresssion.
     * @param {module:model/String} opts.status Filter results by HTTP status codes.
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20011}
     */
    this.getAccessLogs = function(applicationId, rangeStart, rangeEnd, opts) {
      return this.getAccessLogsWithHttpInfo(applicationId, rangeStart, rangeEnd, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get access logs for application
     * 
     * @param {Number} applicationId 
     * @param {Date} rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string
     * @param {Date} rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Only return results where the request path matches the given regular expresssion.
     * @param {module:model/String} opts.method Only return results where the request method matches the given regular expresssion.
     * @param {module:model/String} opts.status Filter results by HTTP status codes.
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20012} and HTTP response
     */
    this.getAccessLogsWithoutTotalCountWithHttpInfo = function(applicationId, rangeStart, rangeEnd, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getAccessLogsWithoutTotalCount");
      }

      // verify the required parameter 'rangeStart' is set
      if (rangeStart === undefined || rangeStart === null) {
        throw new Error("Missing the required parameter 'rangeStart' when calling getAccessLogsWithoutTotalCount");
      }

      // verify the required parameter 'rangeEnd' is set
      if (rangeEnd === undefined || rangeEnd === null) {
        throw new Error("Missing the required parameter 'rangeEnd' when calling getAccessLogsWithoutTotalCount");
      }


      var pathParams = {
        'applicationId': applicationId
      };
      var queryParams = {
        'path': opts['path'],
        'method': opts['method'],
        'status': opts['status'],
        'rangeStart': rangeStart,
        'rangeEnd': rangeEnd,
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/access_logs/no_total', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get access logs for application
     * 
     * @param {Number} applicationId 
     * @param {Date} rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string
     * @param {Date} rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Only return results where the request path matches the given regular expresssion.
     * @param {module:model/String} opts.method Only return results where the request method matches the given regular expresssion.
     * @param {module:model/String} opts.status Filter results by HTTP status codes.
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20012}
     */
    this.getAccessLogsWithoutTotalCount = function(applicationId, rangeStart, rangeEnd, opts) {
      return this.getAccessLogsWithoutTotalCountWithHttpInfo(applicationId, rangeStart, rangeEnd, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Account Details
     * Return the details of your companies Talon.One account. 
     * @param {Number} accountId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20029} and HTTP response
     */
    this.getAccountWithHttpInfo = function(accountId) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccount");
      }


      var pathParams = {
        'accountId': accountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20029;

      return this.apiClient.callApi(
        '/v1/accounts/{accountId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Account Details
     * Return the details of your companies Talon.One account. 
     * @param {Number} accountId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20029}
     */
    this.getAccount = function(accountId) {
      return this.getAccountWithHttpInfo(accountId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all access logs
     * Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
     * @param {Date} rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string
     * @param {Date} rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Only return results where the request path matches the given regular expresssion.
     * @param {module:model/String} opts.method Only return results where the request method matches the given regular expresssion.
     * @param {module:model/String} opts.status Filter results by HTTP status codes.
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20011} and HTTP response
     */
    this.getAllAccessLogsWithHttpInfo = function(rangeStart, rangeEnd, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'rangeStart' is set
      if (rangeStart === undefined || rangeStart === null) {
        throw new Error("Missing the required parameter 'rangeStart' when calling getAllAccessLogs");
      }

      // verify the required parameter 'rangeEnd' is set
      if (rangeEnd === undefined || rangeEnd === null) {
        throw new Error("Missing the required parameter 'rangeEnd' when calling getAllAccessLogs");
      }


      var pathParams = {
      };
      var queryParams = {
        'rangeStart': rangeStart,
        'rangeEnd': rangeEnd,
        'path': opts['path'],
        'method': opts['method'],
        'status': opts['status'],
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20011;

      return this.apiClient.callApi(
        '/v1/access_logs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all access logs
     * Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
     * @param {Date} rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string
     * @param {Date} rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Only return results where the request path matches the given regular expresssion.
     * @param {module:model/String} opts.method Only return results where the request method matches the given regular expresssion.
     * @param {module:model/String} opts.status Filter results by HTTP status codes.
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20011}
     */
    this.getAllAccessLogs = function(rangeStart, rangeEnd, opts) {
      return this.getAllAccessLogsWithHttpInfo(rangeStart, rangeEnd, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Application
     * Get the application specified by the ID.
     * @param {Number} applicationId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200Data} and HTTP response
     */
    this.getApplicationWithHttpInfo = function(applicationId) {
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApplication");
      }


      var pathParams = {
        'applicationId': applicationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200Data;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Application
     * Get the application specified by the ID.
     * @param {Number} applicationId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200Data}
     */
    this.getApplication = function(applicationId) {
      return this.getApplicationWithHttpInfo(applicationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get report of health of application API
     * 
     * @param {Number} applicationId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20010} and HTTP response
     */
    this.getApplicationApiHealthWithHttpInfo = function(applicationId) {
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApplicationApiHealth");
      }


      var pathParams = {
        'applicationId': applicationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20010;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/health_report', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get report of health of application API
     * 
     * @param {Number} applicationId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20010}
     */
    this.getApplicationApiHealth = function(applicationId) {
      return this.getApplicationApiHealthWithHttpInfo(applicationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Application Customer
     * 
     * @param {Number} applicationId 
     * @param {Number} customerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20014Data} and HTTP response
     */
    this.getApplicationCustomerWithHttpInfo = function(applicationId, customerId) {
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApplicationCustomer");
      }

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getApplicationCustomer");
      }


      var pathParams = {
        'applicationId': applicationId,
        'customerId': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20014Data;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/customers/{customerId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Application Customer
     * 
     * @param {Number} applicationId 
     * @param {Number} customerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20014Data}
     */
    this.getApplicationCustomer = function(applicationId, customerId) {
      return this.getApplicationCustomerWithHttpInfo(applicationId, customerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Application Customers
     * 
     * @param {Number} applicationId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20014} and HTTP response
     */
    this.getApplicationCustomersWithHttpInfo = function(applicationId) {
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApplicationCustomers");
      }


      var pathParams = {
        'applicationId': applicationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20014;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/customers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Application Customers
     * 
     * @param {Number} applicationId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20014}
     */
    this.getApplicationCustomers = function(applicationId) {
      return this.getApplicationCustomersWithHttpInfo(applicationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of the customer profiles that match the given attributes
     * Gets a list of all the cusomer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: http://help.talon.one/customer/en/portal/articles/2525263-data-model?b_id&#x3D;14115#customer-profile 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body18} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20015} and HTTP response
     */
    this.getApplicationCustomersByAttributesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20015;

      return this.apiClient.callApi(
        '/v1/application_customer_search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of the customer profiles that match the given attributes
     * Gets a list of all the cusomer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: http://help.talon.one/customer/en/portal/articles/2525263-data-model?b_id&#x3D;14115#customer-profile 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body18} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20015}
     */
    this.getApplicationCustomersByAttributes = function(opts) {
      return this.getApplicationCustomersByAttributesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Applications Event Types
     * Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](/integration-api/reference/#trackEvent) 
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20021} and HTTP response
     */
    this.getApplicationEventTypesWithHttpInfo = function(applicationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApplicationEventTypes");
      }


      var pathParams = {
        'applicationId': applicationId
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20021;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/event_types', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Applications Event Types
     * Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](/integration-api/reference/#trackEvent) 
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20021}
     */
    this.getApplicationEventTypes = function(applicationId, opts) {
      return this.getApplicationEventTypesWithHttpInfo(applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Applications Events
     * Lists all events recorded for an application. 
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.type Comma-separated list of types by which to filter events. Must be exact match(es).
     * @param {Date} opts.createdBefore Only return events created before this date
     * @param {Date} opts.createdAfter Only return events created after this date
     * @param {String} opts.session Session integration ID filter for events. Must be exact match.
     * @param {String} opts.profile Profile integration ID filter for events. Must be exact match.
     * @param {String} opts.customerName Customer name filter for events. Will match substrings case-insensitively.
     * @param {String} opts.customerEmail Customer e-mail address filter for events. Will match substrings case-insensitively.
     * @param {String} opts.effectsQuery Effects filter for events. Will perform a full-text search on the text content of the events effects, if any.
     * @param {String} opts.attributesQuery Attributes filter for events. Will perform a full-text search on the text content of the events attributes, both keys and values.
     * @param {String} opts.ruleQuery Rule name filter for events
     * @param {String} opts.campaignQuery Campaign name filter for events
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20019} and HTTP response
     */
    this.getApplicationEventsWithHttpInfo = function(applicationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApplicationEvents");
      }


      var pathParams = {
        'applicationId': applicationId
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'type': opts['type'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'session': opts['session'],
        'profile': opts['profile'],
        'customerName': opts['customerName'],
        'customerEmail': opts['customerEmail'],
        'effectsQuery': opts['effectsQuery'],
        'attributesQuery': opts['attributesQuery'],
        'ruleQuery': opts['ruleQuery'],
        'campaignQuery': opts['campaignQuery'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20019;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Applications Events
     * Lists all events recorded for an application. 
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.type Comma-separated list of types by which to filter events. Must be exact match(es).
     * @param {Date} opts.createdBefore Only return events created before this date
     * @param {Date} opts.createdAfter Only return events created after this date
     * @param {String} opts.session Session integration ID filter for events. Must be exact match.
     * @param {String} opts.profile Profile integration ID filter for events. Must be exact match.
     * @param {String} opts.customerName Customer name filter for events. Will match substrings case-insensitively.
     * @param {String} opts.customerEmail Customer e-mail address filter for events. Will match substrings case-insensitively.
     * @param {String} opts.effectsQuery Effects filter for events. Will perform a full-text search on the text content of the events effects, if any.
     * @param {String} opts.attributesQuery Attributes filter for events. Will perform a full-text search on the text content of the events attributes, both keys and values.
     * @param {String} opts.ruleQuery Rule name filter for events
     * @param {String} opts.campaignQuery Campaign name filter for events
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20019}
     */
    this.getApplicationEvents = function(applicationId, opts) {
      return this.getApplicationEventsWithHttpInfo(applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Applications Events
     * Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only if there are more results. 
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.type Comma-separated list of types by which to filter events. Must be exact match(es).
     * @param {Date} opts.createdBefore Only return events created before this date
     * @param {Date} opts.createdAfter Only return events created after this date
     * @param {String} opts.session Session integration ID filter for events. Must be exact match.
     * @param {String} opts.profile Profile integration ID filter for events. Must be exact match.
     * @param {String} opts.customerName Customer name filter for events. Will match substrings case-insensitively.
     * @param {String} opts.customerEmail Customer e-mail address filter for events. Will match substrings case-insensitively.
     * @param {String} opts.effectsQuery Effects filter for events. Will perform a full-text search on the text content of the events effects, if any.
     * @param {String} opts.attributesQuery Attributes filter for events. Will perform a full-text search on the text content of the events attributes, both keys and values.
     * @param {String} opts.ruleQuery Rule name filter for events
     * @param {String} opts.campaignQuery Campaign name filter for events
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20020} and HTTP response
     */
    this.getApplicationEventsWithoutTotalCountWithHttpInfo = function(applicationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApplicationEventsWithoutTotalCount");
      }


      var pathParams = {
        'applicationId': applicationId
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'type': opts['type'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'session': opts['session'],
        'profile': opts['profile'],
        'customerName': opts['customerName'],
        'customerEmail': opts['customerEmail'],
        'effectsQuery': opts['effectsQuery'],
        'attributesQuery': opts['attributesQuery'],
        'ruleQuery': opts['ruleQuery'],
        'campaignQuery': opts['campaignQuery'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20020;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/events/no_total', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Applications Events
     * Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only if there are more results. 
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.type Comma-separated list of types by which to filter events. Must be exact match(es).
     * @param {Date} opts.createdBefore Only return events created before this date
     * @param {Date} opts.createdAfter Only return events created after this date
     * @param {String} opts.session Session integration ID filter for events. Must be exact match.
     * @param {String} opts.profile Profile integration ID filter for events. Must be exact match.
     * @param {String} opts.customerName Customer name filter for events. Will match substrings case-insensitively.
     * @param {String} opts.customerEmail Customer e-mail address filter for events. Will match substrings case-insensitively.
     * @param {String} opts.effectsQuery Effects filter for events. Will perform a full-text search on the text content of the events effects, if any.
     * @param {String} opts.attributesQuery Attributes filter for events. Will perform a full-text search on the text content of the events attributes, both keys and values.
     * @param {String} opts.ruleQuery Rule name filter for events
     * @param {String} opts.campaignQuery Campaign name filter for events
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20020}
     */
    this.getApplicationEventsWithoutTotalCount = function(applicationId, opts) {
      return this.getApplicationEventsWithoutTotalCountWithHttpInfo(applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Application Session
     * 
     * @param {Number} applicationId 
     * @param {Number} sessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20018Data} and HTTP response
     */
    this.getApplicationSessionWithHttpInfo = function(applicationId, sessionId) {
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApplicationSession");
      }

      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling getApplicationSession");
      }


      var pathParams = {
        'applicationId': applicationId,
        'sessionId': sessionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20018Data;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/sessions/{sessionId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Application Session
     * 
     * @param {Number} applicationId 
     * @param {Number} sessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20018Data}
     */
    this.getApplicationSession = function(applicationId, sessionId) {
      return this.getApplicationSessionWithHttpInfo(applicationId, sessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Application Sessions
     * 
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.profile Profile integration ID filter for sessions. Must be exact match.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20018} and HTTP response
     */
    this.getApplicationSessionsWithHttpInfo = function(applicationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApplicationSessions");
      }


      var pathParams = {
        'applicationId': applicationId
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'profile': opts['profile'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20018;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/sessions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Application Sessions
     * 
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.profile Profile integration ID filter for sessions. Must be exact match.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20018}
     */
    this.getApplicationSessions = function(applicationId, opts) {
      return this.getApplicationSessionsWithHttpInfo(applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Applications
     * List all application in the current account.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    this.getApplicationsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/v1/applications', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Applications
     * List all application in the current account.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    this.getApplications = function(opts) {
      return this.getApplicationsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a custom attribute
     * Returns custom attribute for the account by its id. 
     * @param {Number} attributeId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20022} and HTTP response
     */
    this.getAttributeWithHttpInfo = function(attributeId) {
      var postBody = null;

      // verify the required parameter 'attributeId' is set
      if (attributeId === undefined || attributeId === null) {
        throw new Error("Missing the required parameter 'attributeId' when calling getAttribute");
      }


      var pathParams = {
        'attributeId': attributeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20022;

      return this.apiClient.callApi(
        '/v1/attributes/{attributeId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a custom attribute
     * Returns custom attribute for the account by its id. 
     * @param {Number} attributeId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20022}
     */
    this.getAttribute = function(attributeId) {
      return this.getAttributeWithHttpInfo(attributeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a Campaign
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001Data} and HTTP response
     */
    this.getCampaignWithHttpInfo = function(applicationId, campaignId) {
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCampaign");
      }

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getCampaign");
      }


      var pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2001Data;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a Campaign
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001Data}
     */
    this.getCampaign = function(applicationId, campaignId) {
      return this.getCampaignWithHttpInfo(applicationId, campaignId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get analytics of campaigns
     * 
     * @param {Number} applicationId The identifier for the application
     * @param {Number} campaignId 
     * @param {Date} rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string
     * @param {Date} rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string
     * @param {Object} opts Optional parameters
     * @param {String} opts.granularity The time interval between the results in the returned time-series.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20013} and HTTP response
     */
    this.getCampaignAnalyticsWithHttpInfo = function(applicationId, campaignId, rangeStart, rangeEnd, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCampaignAnalytics");
      }

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getCampaignAnalytics");
      }

      // verify the required parameter 'rangeStart' is set
      if (rangeStart === undefined || rangeStart === null) {
        throw new Error("Missing the required parameter 'rangeStart' when calling getCampaignAnalytics");
      }

      // verify the required parameter 'rangeEnd' is set
      if (rangeEnd === undefined || rangeEnd === null) {
        throw new Error("Missing the required parameter 'rangeEnd' when calling getCampaignAnalytics");
      }


      var pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      var queryParams = {
        'rangeStart': rangeStart,
        'rangeEnd': rangeEnd,
        'granularity': opts['granularity'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/analytics', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get analytics of campaigns
     * 
     * @param {Number} applicationId The identifier for the application
     * @param {Number} campaignId 
     * @param {Date} rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string
     * @param {Date} rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string
     * @param {Object} opts Optional parameters
     * @param {String} opts.granularity The time interval between the results in the returned time-series.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20013}
     */
    this.getCampaignAnalytics = function(applicationId, campaignId, rangeStart, rangeEnd, opts) {
      return this.getCampaignAnalyticsWithHttpInfo(applicationId, campaignId, rangeStart, rangeEnd, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of all campaigns that match the given attributes
     * Gets a list of all the campaigns that exactly match a set of attributes. 
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {module:model/String} opts.campaignState Filter results by the state of the campaign.
     * @param {module:model/Body6} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response
     */
    this.getCampaignByAttributesWithHttpInfo = function(applicationId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCampaignByAttributes");
      }


      var pathParams = {
        'applicationId': applicationId
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'campaignState': opts['campaignState'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns_search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of all campaigns that match the given attributes
     * Gets a list of all the campaigns that exactly match a set of attributes. 
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {module:model/String} opts.campaignState Filter results by the state of the campaign.
     * @param {module:model/Body6} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001}
     */
    this.getCampaignByAttributes = function(applicationId, opts) {
      return this.getCampaignByAttributesWithHttpInfo(applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List CampaignSet
     * 
     * @param {Number} applicationId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002} and HTTP response
     */
    this.getCampaignSetWithHttpInfo = function(applicationId) {
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCampaignSet");
      }


      var pathParams = {
        'applicationId': applicationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaign_set', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List CampaignSet
     * 
     * @param {Number} applicationId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2002}
     */
    this.getCampaignSet = function(applicationId) {
      return this.getCampaignSetWithHttpInfo(applicationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List your Campaigns
     * 
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {module:model/String} opts.campaignState Filter results by the state of the campaign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response
     */
    this.getCampaignsWithHttpInfo = function(applicationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCampaigns");
      }


      var pathParams = {
        'applicationId': applicationId
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'campaignState': opts['campaignState'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List your Campaigns
     * 
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {module:model/String} opts.campaignState Filter results by the state of the campaign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001}
     */
    this.getCampaigns = function(applicationId, opts) {
      return this.getCampaignsWithHttpInfo(applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get audit log for an account
     * Get list of changes caused by API calls for an account. Only accessible for admins.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20028} and HTTP response
     */
    this.getChangesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20028;

      return this.apiClient.callApi(
        '/v1/changes', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get audit log for an account
     * Get list of changes caused by API calls for an account. Only accessible for admins.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20028}
     */
    this.getChanges = function(opts) {
      return this.getChangesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Coupons
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date} opts.createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.startsAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.startsBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.expiresAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.expiresBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {module:model/String} opts.valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future. 
     * @param {String} opts.batchId Filter results by batches of coupons
     * @param {module:model/String} opts.usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
     * @param {Number} opts.referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code.
     * @param {String} opts.recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field
     * @param {Boolean} opts.exactMatch Filter results to an exact case-insensitive matching against the coupon code (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2004} and HTTP response
     */
    this.getCouponsWithHttpInfo = function(applicationId, campaignId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCoupons");
      }

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getCoupons");
      }


      var pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'value': opts['value'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'startsAfter': opts['startsAfter'],
        'startsBefore': opts['startsBefore'],
        'expiresAfter': opts['expiresAfter'],
        'expiresBefore': opts['expiresBefore'],
        'valid': opts['valid'],
        'batchId': opts['batchId'],
        'usable': opts['usable'],
        'referralId': opts['referralId'],
        'recipientIntegrationId': opts['recipientIntegrationId'],
        'exactMatch': opts['exactMatch'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/coupons', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Coupons
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date} opts.createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.startsAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.startsBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.expiresAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.expiresBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {module:model/String} opts.valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future. 
     * @param {String} opts.batchId Filter results by batches of coupons
     * @param {module:model/String} opts.usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
     * @param {Number} opts.referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code.
     * @param {String} opts.recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field
     * @param {Boolean} opts.exactMatch Filter results to an exact case-insensitive matching against the coupon code (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2004}
     */
    this.getCoupons = function(applicationId, campaignId, opts) {
      return this.getCouponsWithHttpInfo(applicationId, campaignId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of the coupons that match the given attributes
     * Gets a list of all the coupons that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request. 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date} opts.createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {module:model/String} opts.valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future. 
     * @param {module:model/String} opts.usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
     * @param {Number} opts.referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code.
     * @param {String} opts.recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field
     * @param {Boolean} opts.exactMatch Filter results to an exact case-insensitive matching against the coupon code (default to false)
     * @param {String} opts.batchId Filter results by batches of coupons
     * @param {module:model/Body11} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2004} and HTTP response
     */
    this.getCouponsByAttributesWithHttpInfo = function(applicationId, campaignId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCouponsByAttributes");
      }

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getCouponsByAttributes");
      }


      var pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'value': opts['value'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'valid': opts['valid'],
        'usable': opts['usable'],
        'referralId': opts['referralId'],
        'recipientIntegrationId': opts['recipientIntegrationId'],
        'exactMatch': opts['exactMatch'],
        'batchId': opts['batchId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of the coupons that match the given attributes
     * Gets a list of all the coupons that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request. 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date} opts.createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {module:model/String} opts.valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future. 
     * @param {module:model/String} opts.usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
     * @param {Number} opts.referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code.
     * @param {String} opts.recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field
     * @param {Boolean} opts.exactMatch Filter results to an exact case-insensitive matching against the coupon code (default to false)
     * @param {String} opts.batchId Filter results by batches of coupons
     * @param {module:model/Body11} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2004}
     */
    this.getCouponsByAttributes = function(applicationId, campaignId, opts) {
      return this.getCouponsByAttributesWithHttpInfo(applicationId, campaignId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of the coupons that match the given attributes in all active campaigns of an application
     * Gets a list of all the coupons with attributes matching the query criteria Application wide 
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date} opts.createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {module:model/String} opts.valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future. 
     * @param {module:model/String} opts.usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
     * @param {Number} opts.referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code.
     * @param {String} opts.recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field
     * @param {String} opts.batchId Filter results by batches of coupons
     * @param {Boolean} opts.exactMatch Filter results to an exact case-insensitive matching against the coupon code (default to false)
     * @param {module:model/String} opts.campaignState Filter results by the state of the campaign.
     * @param {module:model/Body12} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2004} and HTTP response
     */
    this.getCouponsByAttributesApplicationWideWithHttpInfo = function(applicationId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCouponsByAttributesApplicationWide");
      }


      var pathParams = {
        'applicationId': applicationId
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'value': opts['value'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'valid': opts['valid'],
        'usable': opts['usable'],
        'referralId': opts['referralId'],
        'recipientIntegrationId': opts['recipientIntegrationId'],
        'batchId': opts['batchId'],
        'exactMatch': opts['exactMatch'],
        'campaignState': opts['campaignState'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/coupons_search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of the coupons that match the given attributes in all active campaigns of an application
     * Gets a list of all the coupons with attributes matching the query criteria Application wide 
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date} opts.createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {module:model/String} opts.valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future. 
     * @param {module:model/String} opts.usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
     * @param {Number} opts.referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code.
     * @param {String} opts.recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field
     * @param {String} opts.batchId Filter results by batches of coupons
     * @param {Boolean} opts.exactMatch Filter results to an exact case-insensitive matching against the coupon code (default to false)
     * @param {module:model/String} opts.campaignState Filter results by the state of the campaign.
     * @param {module:model/Body12} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2004}
     */
    this.getCouponsByAttributesApplicationWide = function(applicationId, opts) {
      return this.getCouponsByAttributesApplicationWideWithHttpInfo(applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Coupons
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date} opts.createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {module:model/String} opts.valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future. 
     * @param {module:model/String} opts.usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
     * @param {Number} opts.referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code.
     * @param {String} opts.recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field
     * @param {String} opts.batchId Filter results by batches of coupons
     * @param {Boolean} opts.exactMatch Filter results to an exact case-insensitive matching against the coupon code (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2005} and HTTP response
     */
    this.getCouponsWithoutTotalCountWithHttpInfo = function(applicationId, campaignId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCouponsWithoutTotalCount");
      }

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getCouponsWithoutTotalCount");
      }


      var pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'value': opts['value'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'valid': opts['valid'],
        'usable': opts['usable'],
        'referralId': opts['referralId'],
        'recipientIntegrationId': opts['recipientIntegrationId'],
        'batchId': opts['batchId'],
        'exactMatch': opts['exactMatch'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/no_total', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Coupons
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date} opts.createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {module:model/String} opts.valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future. 
     * @param {module:model/String} opts.usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
     * @param {Number} opts.referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code.
     * @param {String} opts.recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field
     * @param {String} opts.batchId Filter results by batches of coupons
     * @param {Boolean} opts.exactMatch Filter results to an exact case-insensitive matching against the coupon code (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2005}
     */
    this.getCouponsWithoutTotalCount = function(applicationId, campaignId, opts) {
      return this.getCouponsWithoutTotalCountWithHttpInfo(applicationId, campaignId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Activity Report for Single Customer
     * Fetch summary report for single application customer based on a time range
     * @param {Date} rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string
     * @param {Date} rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string
     * @param {Number} applicationId 
     * @param {Number} customerId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20016Data} and HTTP response
     */
    this.getCustomerActivityReportWithHttpInfo = function(rangeStart, rangeEnd, applicationId, customerId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'rangeStart' is set
      if (rangeStart === undefined || rangeStart === null) {
        throw new Error("Missing the required parameter 'rangeStart' when calling getCustomerActivityReport");
      }

      // verify the required parameter 'rangeEnd' is set
      if (rangeEnd === undefined || rangeEnd === null) {
        throw new Error("Missing the required parameter 'rangeEnd' when calling getCustomerActivityReport");
      }

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCustomerActivityReport");
      }

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerActivityReport");
      }


      var pathParams = {
        'applicationId': applicationId,
        'customerId': customerId
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'rangeStart': rangeStart,
        'rangeEnd': rangeEnd,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20016Data;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/customer_activity_reports/{customerId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Activity Report for Single Customer
     * Fetch summary report for single application customer based on a time range
     * @param {Date} rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string
     * @param {Date} rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string
     * @param {Number} applicationId 
     * @param {Number} customerId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20016Data}
     */
    this.getCustomerActivityReport = function(rangeStart, rangeEnd, applicationId, customerId, opts) {
      return this.getCustomerActivityReportWithHttpInfo(rangeStart, rangeEnd, applicationId, customerId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Activity Reports for Application Customers
     * Fetch summary reports for all application customers based on a time range
     * @param {Date} rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string
     * @param {Date} rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.name Only return reports matching the customer name
     * @param {String} opts.integrationId Only return reports matching the integrationId
     * @param {String} opts.campaignName Only return reports matching the campaignName
     * @param {String} opts.advocateName Only return reports matching the current customer referrer name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20016} and HTTP response
     */
    this.getCustomerActivityReportsWithHttpInfo = function(rangeStart, rangeEnd, applicationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'rangeStart' is set
      if (rangeStart === undefined || rangeStart === null) {
        throw new Error("Missing the required parameter 'rangeStart' when calling getCustomerActivityReports");
      }

      // verify the required parameter 'rangeEnd' is set
      if (rangeEnd === undefined || rangeEnd === null) {
        throw new Error("Missing the required parameter 'rangeEnd' when calling getCustomerActivityReports");
      }

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCustomerActivityReports");
      }


      var pathParams = {
        'applicationId': applicationId
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'rangeStart': rangeStart,
        'rangeEnd': rangeEnd,
        'name': opts['name'],
        'integrationId': opts['integrationId'],
        'campaignName': opts['campaignName'],
        'advocateName': opts['advocateName'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20016;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/customer_activity_reports', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Activity Reports for Application Customers
     * Fetch summary reports for all application customers based on a time range
     * @param {Date} rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string
     * @param {Date} rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.name Only return reports matching the customer name
     * @param {String} opts.integrationId Only return reports matching the integrationId
     * @param {String} opts.campaignName Only return reports matching the campaignName
     * @param {String} opts.advocateName Only return reports matching the current customer referrer name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20016}
     */
    this.getCustomerActivityReports = function(rangeStart, rangeEnd, applicationId, opts) {
      return this.getCustomerActivityReportsWithHttpInfo(rangeStart, rangeEnd, applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Activity Reports for Application Customers
     * Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only if there are more results.
     * @param {Date} rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string
     * @param {Date} rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.name Only return reports matching the customer name
     * @param {String} opts.integrationId Only return reports matching the integrationId
     * @param {String} opts.campaignName Only return reports matching the campaignName
     * @param {String} opts.advocateName Only return reports matching the current customer referrer name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20017} and HTTP response
     */
    this.getCustomerActivityReportsWithoutTotalCountWithHttpInfo = function(rangeStart, rangeEnd, applicationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'rangeStart' is set
      if (rangeStart === undefined || rangeStart === null) {
        throw new Error("Missing the required parameter 'rangeStart' when calling getCustomerActivityReportsWithoutTotalCount");
      }

      // verify the required parameter 'rangeEnd' is set
      if (rangeEnd === undefined || rangeEnd === null) {
        throw new Error("Missing the required parameter 'rangeEnd' when calling getCustomerActivityReportsWithoutTotalCount");
      }

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCustomerActivityReportsWithoutTotalCount");
      }


      var pathParams = {
        'applicationId': applicationId
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'rangeStart': rangeStart,
        'rangeEnd': rangeEnd,
        'name': opts['name'],
        'integrationId': opts['integrationId'],
        'campaignName': opts['campaignName'],
        'advocateName': opts['advocateName'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20017;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/customer_activity_reports/no_total', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Activity Reports for Application Customers
     * Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only if there are more results.
     * @param {Date} rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string
     * @param {Date} rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.name Only return reports matching the customer name
     * @param {String} opts.integrationId Only return reports matching the integrationId
     * @param {String} opts.campaignName Only return reports matching the campaignName
     * @param {String} opts.advocateName Only return reports matching the current customer referrer name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20017}
     */
    this.getCustomerActivityReportsWithoutTotalCount = function(rangeStart, rangeEnd, applicationId, opts) {
      return this.getCustomerActivityReportsWithoutTotalCountWithHttpInfo(rangeStart, rangeEnd, applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Event Type
     * @param {Number} eventTypeId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20026Data} and HTTP response
     */
    this.getEventTypeWithHttpInfo = function(eventTypeId) {
      var postBody = null;

      // verify the required parameter 'eventTypeId' is set
      if (eventTypeId === undefined || eventTypeId === null) {
        throw new Error("Missing the required parameter 'eventTypeId' when calling getEventType");
      }


      var pathParams = {
        'eventTypeId': eventTypeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20026Data;

      return this.apiClient.callApi(
        '/v1/event_types/{eventTypeId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Event Type
     * @param {Number} eventTypeId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20026Data}
     */
    this.getEventType = function(eventTypeId) {
      return this.getEventTypeWithHttpInfo(eventTypeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Event Types
     * Fetch all event type definitions for your account. Each event type can be 
     * @param {Object} opts Optional parameters
     * @param {String} opts.applicationIds Filter by one or more application ids separated by comma
     * @param {String} opts.name Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;.
     * @param {Boolean} opts.includeOldVersions Include all versions of every event type. (default to false)
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20026} and HTTP response
     */
    this.getEventTypesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'applicationIds': opts['applicationIds'],
        'name': opts['name'],
        'includeOldVersions': opts['includeOldVersions'],
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20026;

      return this.apiClient.callApi(
        '/v1/event_types', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Event Types
     * Fetch all event type definitions for your account. Each event type can be 
     * @param {Object} opts Optional parameters
     * @param {String} opts.applicationIds Filter by one or more application ids separated by comma
     * @param {String} opts.name Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;.
     * @param {Boolean} opts.includeOldVersions Include all versions of every event type. (default to false)
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20026}
     */
    this.getEventTypes = function(opts) {
      return this.getEventTypesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Exports
     * Get a list of all past exports 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {Number} opts.applicationId 
     * @param {Number} opts.campaignId 
     * @param {module:model/String} opts.entity The name of the entity type that was exported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20031} and HTTP response
     */
    this.getExportsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'applicationId': opts['applicationId'],
        'campaignId': opts['campaignId'],
        'entity': opts['entity'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20031;

      return this.apiClient.callApi(
        '/v1/exports', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Exports
     * Get a list of all past exports 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {Number} opts.applicationId 
     * @param {Number} opts.campaignId 
     * @param {module:model/String} opts.entity The name of the entity type that was exported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20031}
     */
    this.getExports = function(opts) {
      return this.getExportsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch the features RSS feed.
     * 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20033} and HTTP response
     */
    this.getFeaturesFeedWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20033;

      return this.apiClient.callApi(
        '/v1/misc/help_center_articles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Fetch the features RSS feed.
     * 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20033}
     */
    this.getFeaturesFeed = function() {
      return this.getFeaturesFeedWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Imports
     * Get a list of all past imports 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20032} and HTTP response
     */
    this.getImportsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20032;

      return this.apiClient.callApi(
        '/v1/imports', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Imports
     * Get a list of all past imports 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20032}
     */
    this.getImports = function(opts) {
      return this.getImportsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Campaign Manager config
     * Get the current users individual campaign manager configuration. This configuration contains settings for the UI that have no effect on the operation of the API or environment. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20030} and HTTP response
     */
    this.getManagerConfigWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20030;

      return this.apiClient.callApi(
        '/v1/manager_config', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Campaign Manager config
     * Get the current users individual campaign manager configuration. This configuration contains settings for the UI that have no effect on the operation of the API or environment. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20030}
     */
    this.getManagerConfig = function() {
      return this.getManagerConfigWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Referrals
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.code Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date} opts.createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp.
     * @param {Date} opts.createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp.
     * @param {module:model/String} opts.valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future. 
     * @param {module:model/String} opts.usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
     * @param {String} opts.advocate Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2006} and HTTP response
     */
    this.getReferralsWithHttpInfo = function(applicationId, campaignId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getReferrals");
      }

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getReferrals");
      }


      var pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'code': opts['code'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'valid': opts['valid'],
        'usable': opts['usable'],
        'advocate': opts['advocate'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/referrals', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Referrals
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.code Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date} opts.createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp.
     * @param {Date} opts.createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp.
     * @param {module:model/String} opts.valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future. 
     * @param {module:model/String} opts.usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
     * @param {String} opts.advocate Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2006}
     */
    this.getReferrals = function(applicationId, campaignId, opts) {
      return this.getReferralsWithHttpInfo(applicationId, campaignId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Referrals
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.code Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date} opts.createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp.
     * @param {Date} opts.createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp.
     * @param {module:model/String} opts.valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future. 
     * @param {module:model/String} opts.usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
     * @param {String} opts.advocate Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2007} and HTTP response
     */
    this.getReferralsWithoutTotalCountWithHttpInfo = function(applicationId, campaignId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getReferralsWithoutTotalCount");
      }

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getReferralsWithoutTotalCount");
      }


      var pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'code': opts['code'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'valid': opts['valid'],
        'usable': opts['usable'],
        'advocate': opts['advocate'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/no_total', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Referrals
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.code Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date} opts.createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp.
     * @param {Date} opts.createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp.
     * @param {module:model/String} opts.valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future. 
     * @param {module:model/String} opts.usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
     * @param {String} opts.advocate Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2007}
     */
    this.getReferralsWithoutTotalCount = function(applicationId, campaignId, opts) {
      return this.getReferralsWithoutTotalCountWithHttpInfo(applicationId, campaignId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get role
     * Get a specific role.
     * @param {Number} roleId The identifier for the role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2009Data} and HTTP response
     */
    this.getRoleWithHttpInfo = function(roleId) {
      var postBody = null;

      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling getRole");
      }


      var pathParams = {
        'roleId': roleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2009Data;

      return this.apiClient.callApi(
        '/roles/{roleId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get role
     * Get a specific role.
     * @param {Number} roleId The identifier for the role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2009Data}
     */
    this.getRole = function(roleId) {
      return this.getRoleWithHttpInfo(roleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List roles for the account
     * Show roles for this account. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2009} and HTTP response
     */
    this.getRolesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2009;

      return this.apiClient.callApi(
        '/v1/roles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List roles for the account
     * Show roles for this account. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2009}
     */
    this.getRoles = function(opts) {
      return this.getRolesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a Ruleset
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Number} rulesetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2003Data} and HTTP response
     */
    this.getRulesetWithHttpInfo = function(applicationId, campaignId, rulesetId) {
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getRuleset");
      }

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getRuleset");
      }

      // verify the required parameter 'rulesetId' is set
      if (rulesetId === undefined || rulesetId === null) {
        throw new Error("Missing the required parameter 'rulesetId' when calling getRuleset");
      }


      var pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId,
        'rulesetId': rulesetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2003Data;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets/{rulesetId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a Ruleset
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Number} rulesetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2003Data}
     */
    this.getRuleset = function(applicationId, campaignId, rulesetId) {
      return this.getRulesetWithHttpInfo(applicationId, campaignId, rulesetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Campaign Rulesets
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2003} and HTTP response
     */
    this.getRulesetsWithHttpInfo = function(applicationId, campaignId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getRulesets");
      }

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getRulesets");
      }


      var pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Campaign Rulesets
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2003}
     */
    this.getRulesets = function(applicationId, campaignId, opts) {
      return this.getRulesetsWithHttpInfo(applicationId, campaignId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single User
     * Retrieves the data (including an invitation code) for a user. Non-admin users can only get themselves. 
     * @param {Number} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20027Data} and HTTP response
     */
    this.getUserWithHttpInfo = function(userId) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUser");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20027Data;

      return this.apiClient.callApi(
        '/v1/users/{userId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single User
     * Retrieves the data (including an invitation code) for a user. Non-admin users can only get themselves. 
     * @param {Number} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20027Data}
     */
    this.getUser = function(userId) {
      return this.getUserWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Users in your account
     * Retrieve all users in your account. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20027} and HTTP response
     */
    this.getUsersWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20027;

      return this.apiClient.callApi(
        '/v1/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Users in your account
     * Retrieve all users in your account. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20027}
     */
    this.getUsers = function(opts) {
      return this.getUsersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Webhook
     * Returns an webhook by its id.
     * @param {Number} webhookId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20023Data} and HTTP response
     */
    this.getWebhookWithHttpInfo = function(webhookId) {
      var postBody = null;

      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling getWebhook");
      }


      var pathParams = {
        'webhookId': webhookId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20023Data;

      return this.apiClient.callApi(
        '/v1/webhooks/{webhookId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Webhook
     * Returns an webhook by its id.
     * @param {Number} webhookId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20023Data}
     */
    this.getWebhook = function(webhookId) {
      return this.getWebhookWithHttpInfo(webhookId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Webhook activation Log Entries
     * Webhook activation log entries would be created as soon as an integration request triggered an effect with a webhook
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.integrationRequestUuid Filter results by integration request UUID.
     * @param {Number} opts.webhookId Filter results by Webhook.
     * @param {Number} opts.applicationId 
     * @param {Number} opts.campaignId Filter results by campaign.
     * @param {Date} opts.createdBefore Only return events created before this date.
     * @param {Date} opts.createdAfter Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20024} and HTTP response
     */
    this.getWebhookActivationLogsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'integrationRequestUuid': opts['integrationRequestUuid'],
        'webhookId': opts['webhookId'],
        'applicationId': opts['applicationId'],
        'campaignId': opts['campaignId'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20024;

      return this.apiClient.callApi(
        '/v1/webhook_activation_logs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Webhook activation Log Entries
     * Webhook activation log entries would be created as soon as an integration request triggered an effect with a webhook
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.integrationRequestUuid Filter results by integration request UUID.
     * @param {Number} opts.webhookId Filter results by Webhook.
     * @param {Number} opts.applicationId 
     * @param {Number} opts.campaignId Filter results by campaign.
     * @param {Date} opts.createdBefore Only return events created before this date.
     * @param {Date} opts.createdAfter Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20024}
     */
    this.getWebhookActivationLogs = function(opts) {
      return this.getWebhookActivationLogsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Webhook Log Entries
     * 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {module:model/String} opts.status Filter results by HTTP status codes.
     * @param {Number} opts.webhookId Filter results by Webhook.
     * @param {Number} opts.applicationId 
     * @param {Number} opts.campaignId Filter results by campaign.
     * @param {String} opts.requestUuid Filter results by request UUID.
     * @param {Date} opts.createdBefore Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string.
     * @param {Date} opts.createdAfter Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20025} and HTTP response
     */
    this.getWebhookLogsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'status': opts['status'],
        'webhookId': opts['webhookId'],
        'applicationId': opts['applicationId'],
        'campaignId': opts['campaignId'],
        'requestUuid': opts['requestUuid'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20025;

      return this.apiClient.callApi(
        '/v1/webhook_logs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Webhook Log Entries
     * 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {module:model/String} opts.status Filter results by HTTP status codes.
     * @param {Number} opts.webhookId Filter results by Webhook.
     * @param {Number} opts.applicationId 
     * @param {Number} opts.campaignId Filter results by campaign.
     * @param {String} opts.requestUuid Filter results by request UUID.
     * @param {Date} opts.createdBefore Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string.
     * @param {Date} opts.createdAfter Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20025}
     */
    this.getWebhookLogs = function(opts) {
      return this.getWebhookLogsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Webhooks
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.applicationIds Filter by one or more application ids separated by comma
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20023} and HTTP response
     */
    this.getWebhooksWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'applicationIds': opts['applicationIds'],
        'sort': opts['sort'],
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20023;

      return this.apiClient.callApi(
        '/v1/webhooks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Webhooks
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.applicationIds Filter by one or more application ids separated by comma
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20023}
     */
    this.getWebhooks = function(opts) {
      return this.getWebhooksWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Triger refresh on stale analytics.
     * Should be used to trigger a manual refresh of analytics.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.refreshAnalyticsWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/refresh_analytics', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Triger refresh on stale analytics.
     * Should be used to trigger a manual refresh of analytics.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.refreshAnalytics = function() {
      return this.refreshAnalyticsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Renew the token for an API key
     * Renew the token for an API key.
     * @param {Object} opts Optional parameters
     * @param {module:model/Body14} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2008Data} and HTTP response
     */
    this.renewAPITokenWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2008Data;

      return this.apiClient.callApi(
        '/v1/api_keys/renew_token', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Renew the token for an API key
     * Renew the token for an API key.
     * @param {Object} opts Optional parameters
     * @param {module:model/Body14} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2008Data}
     */
    this.renewAPIToken = function(opts) {
      return this.renewAPITokenWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reset password
     * Consumes the supplied password reset token and updates the password for the associated account. 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body26} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2041} and HTTP response
     */
    this.resetPasswordWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2041;

      return this.apiClient.callApi(
        '/v1/reset_password', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Reset password
     * Consumes the supplied password reset token and updates the password for the associated account. 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body26} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2041}
     */
    this.resetPassword = function(opts) {
      return this.resetPasswordWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of the coupons that match the given attributes
     * Gets a list of all the coupons with attributes matching the query criteria 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date} opts.createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {module:model/String} opts.valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future. 
     * @param {module:model/String} opts.usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
     * @param {Number} opts.referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code.
     * @param {String} opts.recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field
     * @param {Boolean} opts.exactMatch Filter results to an exact case-insensitive matching against the coupon code (default to false)
     * @param {String} opts.batchId Filter results by batches of coupons
     * @param {Object} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2004} and HTTP response
     */
    this.searchCouponsAdvancedWithHttpInfo = function(applicationId, campaignId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling searchCouponsAdvanced");
      }

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling searchCouponsAdvanced");
      }


      var pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'value': opts['value'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'valid': opts['valid'],
        'usable': opts['usable'],
        'referralId': opts['referralId'],
        'recipientIntegrationId': opts['recipientIntegrationId'],
        'exactMatch': opts['exactMatch'],
        'batchId': opts['batchId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_search_advanced', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of the coupons that match the given attributes
     * Gets a list of all the coupons with attributes matching the query criteria 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date} opts.createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {module:model/String} opts.valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future. 
     * @param {module:model/String} opts.usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
     * @param {Number} opts.referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code.
     * @param {String} opts.recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field
     * @param {Boolean} opts.exactMatch Filter results to an exact case-insensitive matching against the coupon code (default to false)
     * @param {String} opts.batchId Filter results by batches of coupons
     * @param {Object} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2004}
     */
    this.searchCouponsAdvanced = function(applicationId, campaignId, opts) {
      return this.searchCouponsAdvancedWithHttpInfo(applicationId, campaignId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of the coupons that match the given attributes in all active campaigns of an application
     * Gets a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date} opts.createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {module:model/String} opts.valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future. 
     * @param {module:model/String} opts.usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
     * @param {Number} opts.referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code.
     * @param {String} opts.recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field
     * @param {String} opts.batchId Filter results by batches of coupons
     * @param {Boolean} opts.exactMatch Filter results to an exact case-insensitive matching against the coupon code (default to false)
     * @param {module:model/String} opts.campaignState Filter results by the state of the campaign.
     * @param {Object} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2004} and HTTP response
     */
    this.searchCouponsAdvancedApplicationWideWithHttpInfo = function(applicationId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling searchCouponsAdvancedApplicationWide");
      }


      var pathParams = {
        'applicationId': applicationId
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'value': opts['value'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'valid': opts['valid'],
        'usable': opts['usable'],
        'referralId': opts['referralId'],
        'recipientIntegrationId': opts['recipientIntegrationId'],
        'batchId': opts['batchId'],
        'exactMatch': opts['exactMatch'],
        'campaignState': opts['campaignState'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/coupons_search_advanced', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of the coupons that match the given attributes in all active campaigns of an application
     * Gets a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
     * @param {Number} opts.skip Skips the given number of items when paging through large result sets.
     * @param {String} opts.sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
     * @param {String} opts.value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date} opts.createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {Date} opts.createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
     * @param {module:model/String} opts.valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future. 
     * @param {module:model/String} opts.usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
     * @param {Number} opts.referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code.
     * @param {String} opts.recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field
     * @param {String} opts.batchId Filter results by batches of coupons
     * @param {Boolean} opts.exactMatch Filter results to an exact case-insensitive matching against the coupon code (default to false)
     * @param {module:model/String} opts.campaignState Filter results by the state of the campaign.
     * @param {Object} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2004}
     */
    this.searchCouponsAdvancedApplicationWide = function(applicationId, opts) {
      return this.searchCouponsAdvancedApplicationWideWithHttpInfo(applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update API key data
     * Change an existing API key.
     * @param {Number} apiKeyId The identifier for the API key
     * @param {Object} opts Optional parameters
     * @param {module:model/Body15} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2008Data} and HTTP response
     */
    this.updateAPIKeyWithHttpInfo = function(apiKeyId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'apiKeyId' is set
      if (apiKeyId === undefined || apiKeyId === null) {
        throw new Error("Missing the required parameter 'apiKeyId' when calling updateAPIKey");
      }


      var pathParams = {
        'apiKeyId': apiKeyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2008Data;

      return this.apiClient.callApi(
        '/api_keys/{apiKeyId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update API key data
     * Change an existing API key.
     * @param {Number} apiKeyId The identifier for the API key
     * @param {Object} opts Optional parameters
     * @param {module:model/Body15} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2008Data}
     */
    this.updateAPIKey = function(apiKeyId, opts) {
      return this.updateAPIKeyWithHttpInfo(apiKeyId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Account
     * Update the details of your companies Talon.One account. The fields below are the only ones that accept updates via the API. 
     * @param {Number} accountId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body27} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20029} and HTTP response
     */
    this.updateAccountWithHttpInfo = function(accountId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling updateAccount");
      }


      var pathParams = {
        'accountId': accountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20029;

      return this.apiClient.callApi(
        '/v1/accounts/{accountId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update Account
     * Update the details of your companies Talon.One account. The fields below are the only ones that accept updates via the API. 
     * @param {Number} accountId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body27} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20029}
     */
    this.updateAccount = function(accountId, opts) {
      return this.updateAccountWithHttpInfo(accountId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Application data
     * Change the application specified by the ID.
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body1} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200Data} and HTTP response
     */
    this.updateApplicationWithHttpInfo = function(applicationId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateApplication");
      }


      var pathParams = {
        'applicationId': applicationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200Data;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update Application data
     * Change the application specified by the ID.
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body1} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200Data}
     */
    this.updateApplication = function(applicationId, opts) {
      return this.updateApplicationWithHttpInfo(applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a custom attribute
     * Updates an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. E.g. if you have a customer profile attribute with the name &#x60;region&#x60;, and your integration is sending &#x60;attributes.region&#x60; with customer profile updates, changing the name to &#x60;locale&#x60; would cause the integration requests to begin failing.  If you **really** need to change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. Then delete the old attribute when you are confident you have migrated any needed data from the old attribute to the new one. 
     * @param {Number} attributeId 
     * @param {module:model/Body19} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20022} and HTTP response
     */
    this.updateAttributeWithHttpInfo = function(attributeId, body) {
      var postBody = body;

      // verify the required parameter 'attributeId' is set
      if (attributeId === undefined || attributeId === null) {
        throw new Error("Missing the required parameter 'attributeId' when calling updateAttribute");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAttribute");
      }


      var pathParams = {
        'attributeId': attributeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20022;

      return this.apiClient.callApi(
        '/v1/attributes/{attributeId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a custom attribute
     * Updates an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. E.g. if you have a customer profile attribute with the name &#x60;region&#x60;, and your integration is sending &#x60;attributes.region&#x60; with customer profile updates, changing the name to &#x60;locale&#x60; would cause the integration requests to begin failing.  If you **really** need to change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. Then delete the old attribute when you are confident you have migrated any needed data from the old attribute to the new one. 
     * @param {Number} attributeId 
     * @param {module:model/Body19} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20022}
     */
    this.updateAttribute = function(attributeId, body) {
      return this.updateAttributeWithHttpInfo(attributeId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Campaign
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body4} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001Data} and HTTP response
     */
    this.updateCampaignWithHttpInfo = function(applicationId, campaignId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateCampaign");
      }

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateCampaign");
      }


      var pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2001Data;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a Campaign
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body4} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001Data}
     */
    this.updateCampaign = function(applicationId, campaignId, opts) {
      return this.updateCampaignWithHttpInfo(applicationId, campaignId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Campaign Set
     * 
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body3} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002} and HTTP response
     */
    this.updateCampaignSetWithHttpInfo = function(applicationId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateCampaignSet");
      }


      var pathParams = {
        'applicationId': applicationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaign_set', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a Campaign Set
     * 
     * @param {Number} applicationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body3} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2002}
     */
    this.updateCampaignSet = function(applicationId, opts) {
      return this.updateCampaignSetWithHttpInfo(applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Coupon
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {String} couponId The ID of the coupon code to update
     * @param {Object} opts Optional parameters
     * @param {module:model/Body10} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2004Data} and HTTP response
     */
    this.updateCouponWithHttpInfo = function(applicationId, campaignId, couponId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateCoupon");
      }

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateCoupon");
      }

      // verify the required parameter 'couponId' is set
      if (couponId === undefined || couponId === null) {
        throw new Error("Missing the required parameter 'couponId' when calling updateCoupon");
      }


      var pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId,
        'couponId': couponId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2004Data;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/{couponId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a Coupon
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {String} couponId The ID of the coupon code to update
     * @param {Object} opts Optional parameters
     * @param {module:model/Body10} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2004Data}
     */
    this.updateCoupon = function(applicationId, campaignId, couponId, opts) {
      return this.updateCouponWithHttpInfo(applicationId, campaignId, couponId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Campaign Manager config
     * Updates your personal configuration of the Campaign Manager. As mentioned above, this configuration has no effect on the behaviour of the API or environment. 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body29} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20030} and HTTP response
     */
    this.updateManagerConfigWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20030;

      return this.apiClient.callApi(
        '/v1/manager_config', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update Campaign Manager config
     * Updates your personal configuration of the Campaign Manager. As mentioned above, this configuration has no effect on the behaviour of the API or environment. 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body29} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20030}
     */
    this.updateManagerConfig = function(opts) {
      return this.updateManagerConfigWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update role data
     * Change an existing role.
     * @param {String} roleId The identifier for this role.
     * @param {Object} opts Optional parameters
     * @param {module:model/Body17} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2009Data} and HTTP response
     */
    this.updateRoleWithHttpInfo = function(roleId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling updateRole");
      }


      var pathParams = {
        'roleId': roleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2009Data;

      return this.apiClient.callApi(
        '/roles/{roleId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update role data
     * Change an existing role.
     * @param {String} roleId The identifier for this role.
     * @param {Object} opts Optional parameters
     * @param {module:model/Body17} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2009Data}
     */
    this.updateRole = function(roleId, opts) {
      return this.updateRoleWithHttpInfo(roleId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Ruleset
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Number} rulesetId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body8} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2003Data} and HTTP response
     */
    this.updateRulesetWithHttpInfo = function(applicationId, campaignId, rulesetId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateRuleset");
      }

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateRuleset");
      }

      // verify the required parameter 'rulesetId' is set
      if (rulesetId === undefined || rulesetId === null) {
        throw new Error("Missing the required parameter 'rulesetId' when calling updateRuleset");
      }


      var pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId,
        'rulesetId': rulesetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2003Data;

      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets/{rulesetId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a Ruleset
     * 
     * @param {Number} applicationId 
     * @param {Number} campaignId 
     * @param {Number} rulesetId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body8} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2003Data}
     */
    this.updateRuleset = function(applicationId, campaignId, rulesetId, opts) {
      return this.updateRulesetWithHttpInfo(applicationId, campaignId, rulesetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update User data
     * 
     * @param {Number} userId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body23} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20027Data} and HTTP response
     */
    this.updateUserWithHttpInfo = function(userId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUser");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20027Data;

      return this.apiClient.callApi(
        '/v1/users/{userId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update User data
     * 
     * @param {Number} userId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Body23} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20027Data}
     */
    this.updateUser = function(userId, opts) {
      return this.updateUserWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the latest feature without the need of the user&#39;s password
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/LatestFeature} opts.latestFeature 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateUserLatestFeatureWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['latestFeature'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/misc/update_user_latest_feature', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the latest feature without the need of the user&#39;s password
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/LatestFeature} opts.latestFeature 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateUserLatestFeature = function(opts) {
      return this.updateUserLatestFeatureWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Webhook
     * Updates an existing webhook.
     * @param {Number} webhookId 
     * @param {module:model/Body21} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20023Data} and HTTP response
     */
    this.updateWebhookWithHttpInfo = function(webhookId, body) {
      var postBody = body;

      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling updateWebhook");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateWebhook");
      }


      var pathParams = {
        'webhookId': webhookId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['manager_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20023Data;

      return this.apiClient.callApi(
        '/v1/webhooks/{webhookId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update Webhook
     * Updates an existing webhook.
     * @param {Number} webhookId 
     * @param {module:model/Body21} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20023Data}
     */
    this.updateWebhook = function(webhookId, body) {
      return this.updateWebhookWithHttpInfo(webhookId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
